import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
  statement: null,
  saved: true,
};

export const saveStatementToDB = createAsyncThunk(
  "statement/saveStatement",
  async (amount) => {
    const response = { data: { success: true } }; //await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const statementSlice = createSlice({
  name: "statement",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    saveStatement: (state, action) => {
      state.statement = { ...state.statement, ...action.payload };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(saveStatementToDB.pending, (state) => {
        state.status = "loading";
        state.saved = false;
      })
      .addCase(saveStatementToDB.fulfilled, (state, action) => {
        state.status = "idle";
        state.saved = action.payload.success;
      });
  },
});

export const { saveStatement } = statementSlice.actions;

export const selectStatement = (state) => state.statement.statement;

export default statementSlice.reducer;
